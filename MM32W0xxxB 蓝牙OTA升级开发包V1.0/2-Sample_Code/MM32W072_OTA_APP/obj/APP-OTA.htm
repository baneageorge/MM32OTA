<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\APP-OTA.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\APP-OTA.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Wed Jun 03 13:30:16 2020
<BR><P>
<H3>Maximum Stack Usage =        248 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
sconn_onSleep &rArr; s_opcodeCheckOld &rArr; ser_write_rsp &rArr; OTA_Proc &rArr; sconn_notifydata &rArr; ser_notify_handle &rArr; att_rsp &rArr; GenerateTxQueue &rArr; queue_push &rArr; create_node
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[11]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">ADC1_IRQHandler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[11]">ADC1_IRQHandler</a> from startup_mm32l0xx.o(.text) referenced from startup_mm32l0xx.o(RESET)
 <LI><a href="#[1e]">AES_IRQHandler</a> from startup_mm32l0xx.o(.text) referenced from startup_mm32l0xx.o(RESET)
 <LI><a href="#[1f]">CAN_IRQHandler</a> from startup_mm32l0xx.o(.text) referenced from startup_mm32l0xx.o(RESET)
 <LI><a href="#[e]">DMA1_Channel1_IRQHandler</a> from startup_mm32l0xx.o(.text) referenced from startup_mm32l0xx.o(RESET)
 <LI><a href="#[f]">DMA1_Channel2_3_IRQHandler</a> from startup_mm32l0xx.o(.text) referenced from startup_mm32l0xx.o(RESET)
 <LI><a href="#[10]">DMA1_Channel4_5_IRQHandler</a> from startup_mm32l0xx.o(.text) referenced from startup_mm32l0xx.o(RESET)
 <LI><a href="#[b]">EXTI0_1_IRQHandler</a> from mm32w072_it.o(.text) referenced from startup_mm32l0xx.o(RESET)
 <LI><a href="#[c]">EXTI2_3_IRQHandler</a> from startup_mm32l0xx.o(.text) referenced from startup_mm32l0xx.o(RESET)
 <LI><a href="#[d]">EXTI4_15_IRQHandler</a> from mm32w072_it.o(.text) referenced from startup_mm32l0xx.o(RESET)
 <LI><a href="#[9]">FLASH_IRQHandler</a> from startup_mm32l0xx.o(.text) referenced from startup_mm32l0xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from mm32w072_it.o(.text) referenced from startup_mm32l0xx.o(RESET)
 <LI><a href="#[19]">I2C1_IRQHandler</a> from startup_mm32l0xx.o(.text) referenced from startup_mm32l0xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from mm32w072_it.o(.text) referenced from startup_mm32l0xx.o(RESET)
 <LI><a href="#[7]">PVD_IRQHandler</a> from startup_mm32l0xx.o(.text) referenced from startup_mm32l0xx.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from mm32w072_it.o(.text) referenced from startup_mm32l0xx.o(RESET)
 <LI><a href="#[a]">RCC_IRQHandler</a> from startup_mm32l0xx.o(.text) referenced from startup_mm32l0xx.o(RESET)
 <LI><a href="#[8]">RTC_IRQHandler</a> from startup_mm32l0xx.o(.text) referenced from startup_mm32l0xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_mm32l0xx.o(.text) referenced from startup_mm32l0xx.o(RESET)
 <LI><a href="#[1a]">SPI1_IRQHandler</a> from startup_mm32l0xx.o(.text) referenced from startup_mm32l0xx.o(RESET)
 <LI><a href="#[1b]">SPI2_IRQHandler</a> from startup_mm32l0xx.o(.text) referenced from startup_mm32l0xx.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from mm32w072_it.o(.text) referenced from startup_mm32l0xx.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from mm32w072_it.o(.text) referenced from startup_mm32l0xx.o(RESET)
 <LI><a href="#[22]">SystemInit</a> from system_mm32l0xx.o(.text) referenced from startup_mm32l0xx.o(.text)
 <LI><a href="#[16]">TIM14_IRQHandler</a> from startup_mm32l0xx.o(.text) referenced from startup_mm32l0xx.o(RESET)
 <LI><a href="#[17]">TIM16_IRQHandler</a> from startup_mm32l0xx.o(.text) referenced from startup_mm32l0xx.o(RESET)
 <LI><a href="#[18]">TIM17_IRQHandler</a> from startup_mm32l0xx.o(.text) referenced from startup_mm32l0xx.o(RESET)
 <LI><a href="#[12]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_mm32l0xx.o(.text) referenced from startup_mm32l0xx.o(RESET)
 <LI><a href="#[13]">TIM1_CC_IRQHandler</a> from startup_mm32l0xx.o(.text) referenced from startup_mm32l0xx.o(RESET)
 <LI><a href="#[14]">TIM2_IRQHandler</a> from startup_mm32l0xx.o(.text) referenced from startup_mm32l0xx.o(RESET)
 <LI><a href="#[15]">TIM3_IRQHandler</a> from startup_mm32l0xx.o(.text) referenced from startup_mm32l0xx.o(RESET)
 <LI><a href="#[1c]">UART1_IRQHandler</a> from startup_mm32l0xx.o(.text) referenced from startup_mm32l0xx.o(RESET)
 <LI><a href="#[1d]">UART2_IRQHandler</a> from startup_mm32l0xx.o(.text) referenced from startup_mm32l0xx.o(RESET)
 <LI><a href="#[20]">USB_IRQHandler</a> from startup_mm32l0xx.o(.text) referenced from startup_mm32l0xx.o(RESET)
 <LI><a href="#[6]">WWDG_IRQHandler</a> from startup_mm32l0xx.o(.text) referenced from startup_mm32l0xx.o(RESET)
 <LI><a href="#[23]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_mm32l0xx.o(.text)
 <LI><a href="#[27]">adv_generic_onRxAA</a> from fsm_adv_generic.o(i.adv_generic_onRxAA) referenced from fsm_adv_generic.o(.constdata)
 <LI><a href="#[28]">adv_generic_onRxPDU</a> from fsm_adv_generic.o(i.adv_generic_onRxPDU) referenced from fsm_adv_generic.o(.constdata)
 <LI><a href="#[2a]">adv_generic_onSleep</a> from fsm_adv_generic.o(i.adv_generic_onSleep) referenced from fsm_adv_generic.o(.constdata)
 <LI><a href="#[25]">adv_generic_onStart</a> from fsm_adv_generic.o(i.adv_generic_onStart) referenced from fsm_adv_generic.o(.constdata)
 <LI><a href="#[29]">adv_generic_onTxStarted</a> from fsm_adv_generic.o(i.adv_generic_onTxStarted) referenced from fsm_adv_generic.o(.constdata)
 <LI><a href="#[26]">adv_generic_onWakeup</a> from fsm_adv_generic.o(i.adv_generic_onWakeup) referenced from fsm_adv_generic.o(.constdata)
 <LI><a href="#[21]">main</a> from main_ota.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[24]">s_opcodeCheck</a> from slave_dispatch.o(i.s_opcodeCheck) referenced from slave_dispatch.o(.constdata)
 <LI><a href="#[2c]">sconn_onRxAA</a> from fsm_sconn.o(i.sconn_onRxAA) referenced from fsm_sconn.o(.constdata)
 <LI><a href="#[2d]">sconn_onRxPDU</a> from fsm_sconn.o(i.sconn_onRxPDU) referenced from fsm_sconn.o(.constdata)
 <LI><a href="#[2f]">sconn_onSleep</a> from fsm_sconn.o(i.sconn_onSleep) referenced from fsm_sconn.o(.constdata)
 <LI><a href="#[2e]">sconn_onTxStarted</a> from fsm_sconn.o(i.sconn_onTxStarted) referenced from fsm_sconn.o(.constdata)
 <LI><a href="#[2b]">sconn_onWakeup</a> from fsm_sconn.o(i.sconn_onWakeup) referenced from fsm_sconn.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[23]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l0xx.o(.text)
</UL>
<P><STRONG><a name="[ed]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[30]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[81]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[ee]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[ef]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[f0]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[f1]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[f2]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[22]"></a>SystemInit</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, system_mm32l0xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SystemInit &rArr; SetSysClockTo48
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo48
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l0xx.o(.text)
</UL>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, startup_mm32l0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>AES_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DMA1_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>SPIM_TXEn</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_ota.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPIM_TXEn &rArr; SPI_BiDirectionalLineConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_BiDirectionalLineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_Init
</UL>

<P><STRONG><a name="[35]"></a>SPIM_TXDisable</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_ota.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_BiDirectionalLineConfig
</UL>

<P><STRONG><a name="[36]"></a>SPIM_RXEn</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_ota.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPIM_RXEn &rArr; SPI_BiDirectionalLineConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_BiDirectionalLineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_Init
</UL>

<P><STRONG><a name="[37]"></a>SPIM_RXDisable</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_ota.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_BiDirectionalLineConfig
</UL>

<P><STRONG><a name="[38]"></a>SPIM_Init</STRONG> (Thumb, 232 bytes, Stack size 48 bytes, bsp_ota.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SPIM_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_RXEn
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_TXEn
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[41]"></a>SetSysClock_HSI</STRONG> (Thumb, 118 bytes, Stack size 12 bytes, bsp_ota.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock_HSI
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClk_HSEInit
</UL>

<P><STRONG><a name="[40]"></a>SystemClk_HSEInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bsp_ota.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemClk_HSEInit &rArr; SetSysClock_HSI
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSYSCLKSource
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock_HSI
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClk8to48
</UL>

<P><STRONG><a name="[44]"></a>SysClk8to48</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp_ota.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SysClk8to48 &rArr; SystemClk_HSEInit &rArr; SetSysClock_HSI
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClk_HSEInit
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuGotoSleepAndWakeup
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_advCalTimerIrq
</UL>

<P><STRONG><a name="[46]"></a>SysClk48to8</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bsp_ota.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysClk48to8 &rArr; SysTick_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSYSCLKSource
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuGotoSleepAndWakeup
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMcuTimerForRcCal
</UL>

<P><STRONG><a name="[47]"></a>SysTick_Configuration</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_ota.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>

<P><STRONG><a name="[4a]"></a>LED_ONOFF</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bsp_ota.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[49]"></a>CodeNvcRemap</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, bsp_ota.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CodeNvcRemap
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[48]"></a>BSP_Init</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, bsp_ota.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = BSP_Init &rArr; SPIM_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeNvcRemap
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_ONOFF
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClk_HSEInit
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_Init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c1]"></a>SPI_WriteRead</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bsp_ota.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_writeReg
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_writeBuf
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_readReg
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_readBuf
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_activate
</UL>

<P><STRONG><a name="[4f]"></a>SPI_CS_Enable_</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp_ota.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_CS_Enable_
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_writeReg
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_writeBuf
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_readReg
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_readBuf
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_activate
</UL>

<P><STRONG><a name="[51]"></a>SPI_CS_Disable_</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp_ota.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_CS_Disable_
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_writeReg
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_writeBuf
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_readReg
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_readBuf
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_activate
</UL>

<P><STRONG><a name="[52]"></a>McuGotoSleepAndWakeup</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, bsp_ota.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = McuGotoSleepAndWakeup &rArr; SysClk8to48 &rArr; SystemClk_HSEInit &rArr; SetSysClock_HSI
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClk48to8
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClk8to48
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_run
</UL>

<P><STRONG><a name="[e2]"></a>DisableEnvINT</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_ota.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onRxPDU
</UL>

<P><STRONG><a name="[e4]"></a>EnableEnvINT</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bsp_ota.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onRxPDU
</UL>

<P><STRONG><a name="[53]"></a>IsIrqEnabled</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, bsp_ota.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsIrqEnabled
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputData
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_run
</UL>

<P><STRONG><a name="[8a]"></a>GetOtaAddr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_ota.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTA_Proc
</UL>

<P><STRONG><a name="[8e]"></a>GetCodeAddr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_ota.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTA_Proc
</UL>

<P><STRONG><a name="[55]"></a>WriteFlashE2PROM</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, bsp_ota.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = WriteFlashE2PROM &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTA_Proc
</UL>

<P><STRONG><a name="[8d]"></a>OtaSystemReboot</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bsp_ota.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgOta
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTA_Proc
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mm32w072_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mm32w072_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mm32w072_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mm32w072_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>GetSysTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mm32w072_it.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMcuTimerForRcCal
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSwTimer
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMcuWakeUpFlag
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSwTimeOut
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSleep
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMcuTimerForRcCal
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mm32w072_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, mm32w072_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI0_1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mm32w072_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI4_15_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l0xx.o(RESET)
</UL>
<P><STRONG><a name="[f3]"></a>EXTI_DeInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_exti.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>EXTI_Init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, hal_exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[f4]"></a>EXTI_StructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_exti.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>EXTI_GenerateSWInterrupt</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_exti.o(.text), UNUSED)

<P><STRONG><a name="[f6]"></a>EXTI_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_exti.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>EXTI_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_exti.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>EXTI_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_exti.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
</UL>

<P><STRONG><a name="[f9]"></a>FLASH_SetLatency</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_flash.o(.text), UNUSED)

<P><STRONG><a name="[fa]"></a>FLASH_HalfCycleAccessCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_flash.o(.text), UNUSED)

<P><STRONG><a name="[fb]"></a>FLASH_PrefetchBufferCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_flash.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>FLASH_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashE2PROM
</UL>

<P><STRONG><a name="[58]"></a>FLASH_Lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashE2PROM
</UL>

<P><STRONG><a name="[5b]"></a>FLASH_GetStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hal_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[5a]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, hal_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_UserOptionByteConfig
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadOutProtection
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EnableWriteProtection
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramOptionByteData
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSystem
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOptionBytes
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseAllPages
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
</UL>

<P><STRONG><a name="[5c]"></a>FLASH_ErasePage</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, hal_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[5d]"></a>FLASH_EraseAllPages</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, hal_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[5e]"></a>FLASH_EraseOptionBytes</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, hal_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[5f]"></a>FLASH_EraseSystem</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, hal_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[57]"></a>FLASH_ProgramWord</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, hal_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashE2PROM
</UL>

<P><STRONG><a name="[60]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, hal_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[61]"></a>FLASH_ProgramOptionByteData</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, hal_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[62]"></a>FLASH_EnableWriteProtection</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, hal_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[63]"></a>FLASH_ReadOutProtection</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, hal_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[64]"></a>FLASH_UserOptionByteConfig</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, hal_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[fc]"></a>FLASH_GetUserOptionByte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_flash.o(.text), UNUSED)

<P><STRONG><a name="[fd]"></a>FLASH_GetWriteProtectionOptionByte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_flash.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>FLASH_GetReadOutProtectionStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_flash.o(.text), UNUSED)

<P><STRONG><a name="[ff]"></a>FLASH_GetPrefetchBufferStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_flash.o(.text), UNUSED)

<P><STRONG><a name="[100]"></a>FLASH_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_flash.o(.text), UNUSED)

<P><STRONG><a name="[101]"></a>FLASH_GetFlagStatus</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, hal_flash.o(.text), UNUSED)

<P><STRONG><a name="[102]"></a>FLASH_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_flash.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>GPIO_DeInit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, hal_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>

<P><STRONG><a name="[3c]"></a>GPIO_Init</STRONG> (Thumb, 146 bytes, Stack size 20 bytes, hal_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_Init
</UL>

<P><STRONG><a name="[103]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[104]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[54]"></a>GPIO_ReadInputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqEnabled
</UL>

<P><STRONG><a name="[105]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[106]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_Disable_
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_Init
</UL>

<P><STRONG><a name="[50]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuGotoSleepAndWakeup
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_Enable_
</UL>

<P><STRONG><a name="[107]"></a>GPIO_WriteBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[108]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hal_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_Init
</UL>

<P><STRONG><a name="[4e]"></a>NVIC_Init</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, hal_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[10a]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal_misc.o(.text), UNUSED)

<P><STRONG><a name="[10b]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_misc.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hal_misc.o(.text), UNUSED)

<P><STRONG><a name="[10d]"></a>RCC_DeInit</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[10e]"></a>RCC_HSEConfig</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, hal_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[66]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, hal_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[10f]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[110]"></a>RCC_HSICmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>RCC_PLLDMDNConfig</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hal_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLConfig
</UL>

<P><STRONG><a name="[68]"></a>RCC_PLLConfig</STRONG> (Thumb, 324 bytes, Stack size 12 bytes, hal_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLDMDNConfig
</UL>

<P><STRONG><a name="[111]"></a>RCC_PLLCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClk48to8
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClk_HSEInit
</UL>

<P><STRONG><a name="[43]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClk48to8
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClk_HSEInit
</UL>

<P><STRONG><a name="[112]"></a>RCC_HCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[113]"></a>RCC_PCLK1Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[114]"></a>RCC_PCLK2Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[115]"></a>RCC_ITConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[116]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[117]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[118]"></a>RCC_LSEConfig</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[119]"></a>RCC_LSICmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[11a]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[11b]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, hal_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[3a]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_Init
</UL>

<P><STRONG><a name="[4b]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[39]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, hal_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_Init
</UL>

<P><STRONG><a name="[6d]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DeInit
</UL>

<P><STRONG><a name="[11c]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[11d]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[11e]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[11f]"></a>RCC_MCOConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[120]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[121]"></a>RCC_GetITStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[122]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>SPI_DeInit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hal_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[3e]"></a>SPI_Init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_Init
</UL>

<P><STRONG><a name="[123]"></a>SPI_StructInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hal_spi.o(.text), UNUSED)

<P><STRONG><a name="[3f]"></a>SPI_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hal_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_Init
</UL>

<P><STRONG><a name="[124]"></a>SPI_ITConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hal_spi.o(.text), UNUSED)

<P><STRONG><a name="[125]"></a>SPI_DMACmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_spi.o(.text), UNUSED)

<P><STRONG><a name="[126]"></a>SPI_FifoTrigger</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_spi.o(.text), UNUSED)

<P><STRONG><a name="[127]"></a>SPI_SendData</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, hal_spi.o(.text), UNUSED)

<P><STRONG><a name="[128]"></a>SPI_ReceiveData</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, hal_spi.o(.text), UNUSED)

<P><STRONG><a name="[129]"></a>SPI_CSInternalSelected</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_spi.o(.text), UNUSED)

<P><STRONG><a name="[12a]"></a>SPI_NSSInternalSoftwareConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hal_spi.o(.text), UNUSED)

<P><STRONG><a name="[12b]"></a>SPI_DataSizeConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_spi.o(.text), UNUSED)

<P><STRONG><a name="[34]"></a>SPI_BiDirectionalLineConfig</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_BiDirectionalLineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_RXDisable
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_RXEn
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_TXDisable
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_TXEn
</UL>

<P><STRONG><a name="[12c]"></a>SPI_GetFlagStatus</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, hal_spi.o(.text), UNUSED)

<P><STRONG><a name="[12d]"></a>SPI_GetITStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_spi.o(.text), UNUSED)

<P><STRONG><a name="[12e]"></a>SPI_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_spi.o(.text), UNUSED)

<P><STRONG><a name="[12f]"></a>SPI_RxBytes</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_spi.o(.text), UNUSED)

<P><STRONG><a name="[130]"></a>SPI_SlaveAdjust</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_spi.o(.text), UNUSED)

<P><STRONG><a name="[131]"></a>SYSCFG_DeInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hal_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[132]"></a>SYSCFG_MemoryRemapConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[133]"></a>SYSCFG_DMAChannelRemapConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>SYSCFG_EXTILineConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hal_syscfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[b1]"></a>getDeviceInfoData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_ota.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_adv_generic_para
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_rdByType
</UL>

<P><STRONG><a name="[6e]"></a>updateDeviceInfoData</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, app_ota.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_set_name
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[ae]"></a>GetCharListDim</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_ota.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_rdByType
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_findIn
</UL>

<P><STRONG><a name="[71]"></a>att_server_rdByGrType</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, app_ota.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = att_server_rdByGrType &rArr; att_server_rdByGrTypeRspPrimaryService &rArr; att_rsp &rArr; GenerateTxQueue &rArr; queue_push &rArr; create_node
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_rdByGrTypeRspPrimaryService
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_notFd
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_opcodeCheckOld
</UL>

<P><STRONG><a name="[74]"></a>ser_write_rsp</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, app_ota.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ser_write_rsp &rArr; OTA_Proc &rArr; sconn_notifydata &rArr; ser_notify_handle &rArr; att_rsp &rArr; GenerateTxQueue &rArr; queue_push &rArr; create_node
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_write_rsp_pkt
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_notFd
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTA_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_opcodeCheckOld
</UL>

<P><STRONG><a name="[ea]"></a>ser_prepare_write</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_ota.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_prepare_write_rsp
</UL>

<P><STRONG><a name="[e9]"></a>ser_execute_write</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_ota.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_execute_write_rsp
</UL>

<P><STRONG><a name="[77]"></a>server_rd_rsp</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, app_ota.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = server_rd_rsp &rArr; att_server_rd &rArr; att_rsp &rArr; GenerateTxQueue &rArr; queue_push &rArr; create_node
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_rd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_notFd
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_opcodeCheckOld
</UL>

<P><STRONG><a name="[ac]"></a>GetPrimaryServiceHandle</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_ota.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_findByType
</UL>

<P><STRONG><a name="[d9]"></a>gatt_user_send_notify_data_callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_ota.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_opcodeCheckOld
</UL>

<P><STRONG><a name="[134]"></a>getsoftwareversion</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_ota.o(.text), UNUSED)

<P><STRONG><a name="[135]"></a>GetConnectedStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_ota.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>UsrProcCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_ota.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_run
</UL>

<P><STRONG><a name="[e7]"></a>ConnectStausUpdate</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_ota.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onSleep
</UL>

<P><STRONG><a name="[136]"></a>get_local_addr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main_ota.o(.text), UNUSED)

<P><STRONG><a name="[21]"></a>main</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, main_ota.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = main &rArr; BSP_Init &rArr; SPIM_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_initBle
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_set_adv_rsp_data
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_set_adv_data
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[137]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onSleep
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoRcConvert_HF_LF_COEF
</UL>

<P><STRONG><a name="[138]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoRcConvert_LF_AMPLE
</UL>

<P><STRONG><a name="[6f]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateTxQueue
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_rdByType
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_set_adv_rsp_data
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_set_adv_data
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDeviceInfoData
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;applyUpdateChm
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_connPara
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconnUpChm
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_opcodeCheckOld
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readQueue
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_node
</UL>

<P><STRONG><a name="[d0]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llConnParaReq
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llConnParaRsp
</UL>

<P><STRONG><a name="[139]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[7f]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[13a]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[13b]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[af]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_notify_handle
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_rd
</UL>

<P><STRONG><a name="[13c]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[98]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onRxPDU
</UL>

<P><STRONG><a name="[31]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[13d]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[13e]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[13f]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>CRC16</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mg_ota.o(i.CRC16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTA_Proc
</UL>

<P><STRONG><a name="[82]"></a>CanSleep</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hwtest.o(i.CanSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CanSleep
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_run
</UL>

<P><STRONG><a name="[84]"></a>CheckMcuTimerForRcCal</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, fsm_adv_generic.o(i.CheckMcuTimerForRcCal))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CheckMcuTimerForRcCal
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_run
</UL>

<P><STRONG><a name="[85]"></a>DoRcConvert_HF_LF_COEF</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsm_adv_generic.o(i.DoRcConvert_HF_LF_COEF))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DoRcConvert_HF_LF_COEF &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onSleep
</UL>

<P><STRONG><a name="[86]"></a>DoRcConvert_LF_AMPLE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fsm_adv_generic.o(i.DoRcConvert_LF_AMPLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DoRcConvert_LF_AMPLE &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;applyConnUpdate
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onSleep
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onSleep
</UL>

<P><STRONG><a name="[87]"></a>GenerateTxQueue</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, slave_dispatch.o(i.GenerateTxQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GenerateTxQueue &rArr; queue_push &rArr; create_node
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_push
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_rsp
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llConnParaReq
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llVersion
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llSmPair
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llFea
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llEnc
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llConnParaRsp
</UL>

<P><STRONG><a name="[b5]"></a>GetAdvEnableFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsm_adv_generic.o(i.GetAdvEnableFlag))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_run
</UL>

<P><STRONG><a name="[89]"></a>IsSwTimeOut</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hwtest.o(i.IsSwTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsSwTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_CheckLLConectionTO
</UL>

<P><STRONG><a name="[e8]"></a>NotifyComData</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hwtest.o(i.NotifyComData))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onSleep
</UL>

<P><STRONG><a name="[75]"></a>OTA_Proc</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, att.o(i.OTA_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = OTA_Proc &rArr; sconn_notifydata &rArr; ser_notify_handle &rArr; att_rsp &rArr; GenerateTxQueue &rArr; queue_push &rArr; create_node
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OtaSystemReboot
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashE2PROM
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCodeAddr
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOtaAddr
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_sleep
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgOta
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_notifydata
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_write_rsp
</UL>

<P><STRONG><a name="[e3]"></a>SaveCurrentHdr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, slave_dispatch.o(i.SaveCurrentHdr))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onRxPDU
</UL>

<P><STRONG><a name="[9f]"></a>SetMcuSleepFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hwtest.o(i.SetMcuSleepFlag))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onSleep
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onSleep
</UL>

<P><STRONG><a name="[91]"></a>SetMcuTimerForRcCal</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fsm_adv_generic.o(i.SetMcuTimerForRcCal))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetMcuTimerForRcCal &rArr; SysClk48to8 &rArr; SysTick_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTickCount
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClk48to8
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onRxAA
</UL>

<P><STRONG><a name="[92]"></a>SetMcuWakeUpFlag</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hwtest.o(i.SetMcuWakeUpFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetMcuWakeUpFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_run
</UL>

<P><STRONG><a name="[93]"></a>SetSwTimer</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, hwtest.o(i.SetSwTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetSwTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_ReSetLLSupvTimer
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onRxPDU
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_sconnStart
</UL>

<P><STRONG><a name="[c0]"></a>Tx_len</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fsm_base.o(i.Tx_len))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;empty_pk
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txRsp
</UL>

<P><STRONG><a name="[c5]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hal_adc.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_getPdu
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_opcodeCheckOld
</UL>

<P><STRONG><a name="[140]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[141]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[142]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[a5]"></a>applyConnUpdate</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, fsm_sconn.o(i.applyConnUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = applyConnUpdate &rArr; radio_setWakeupTime &rArr; mg_writeBuf &rArr; SPI_CS_Disable_
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setWakeupTime
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setTimeout
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoRcConvert_LF_AMPLE
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onSleep
</UL>

<P><STRONG><a name="[a6]"></a>applyUpdateChm</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, fsm_sconn.o(i.applyUpdateChm))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = applyUpdateChm &rArr; sconn_onNumUsedCh
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onNumUsedCh
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onSleep
</UL>

<P><STRONG><a name="[a9]"></a>att_exMtuReq</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, att.o(i.att_exMtuReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = att_exMtuReq &rArr; att_rsp &rArr; GenerateTxQueue &rArr; queue_push &rArr; create_node
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_rsp
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_opcodeCheckOld
</UL>

<P><STRONG><a name="[73]"></a>att_notFd</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, att.o(i.att_notFd))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = att_notFd &rArr; att_rsp &rArr; GenerateTxQueue &rArr; queue_push &rArr; create_node
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_rsp
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_rdByType
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_findIn
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_findByType
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_rd_rsp
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_write_rsp
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_rdByGrType
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_opcodeCheckOld
</UL>

<P><STRONG><a name="[ab]"></a>att_server_findByType</STRONG> (Thumb, 110 bytes, Stack size 64 bytes, att.o(i.att_server_findByType))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = att_server_findByType &rArr; att_notFd &rArr; att_rsp &rArr; GenerateTxQueue &rArr; queue_push &rArr; create_node
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_rsp
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_notFd
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPrimaryServiceHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_opcodeCheckOld
</UL>

<P><STRONG><a name="[ad]"></a>att_server_findIn</STRONG> (Thumb, 126 bytes, Stack size 64 bytes, att.o(i.att_server_findIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = att_server_findIn &rArr; att_notFd &rArr; att_rsp &rArr; GenerateTxQueue &rArr; queue_push &rArr; create_node
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_rsp
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_notFd
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCharListDim
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_opcodeCheckOld
</UL>

<P><STRONG><a name="[78]"></a>att_server_rd</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, att.o(i.att_server_rd))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = att_server_rd &rArr; att_rsp &rArr; GenerateTxQueue &rArr; queue_push &rArr; create_node
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_rsp
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_rd_rsp
</UL>

<P><STRONG><a name="[72]"></a>att_server_rdByGrTypeRspPrimaryService</STRONG> (Thumb, 90 bytes, Stack size 56 bytes, att.o(i.att_server_rdByGrTypeRspPrimaryService))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = att_server_rdByGrTypeRspPrimaryService &rArr; att_rsp &rArr; GenerateTxQueue &rArr; queue_push &rArr; create_node
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_rsp
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_rdByGrType
</UL>

<P><STRONG><a name="[b0]"></a>att_server_rdByType</STRONG> (Thumb, 478 bytes, Stack size 72 bytes, att.o(i.att_server_rdByType))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = att_server_rdByType &rArr; att_notFd &rArr; att_rsp &rArr; GenerateTxQueue &rArr; queue_push &rArr; create_node
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_rsp
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_notFd
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCharListDim
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDeviceInfoData
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_opcodeCheckOld
</UL>

<P><STRONG><a name="[b2]"></a>bb_advCalTimerIrq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fsm_adv_generic.o(i.bb_advCalTimerIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bb_advCalTimerIrq &rArr; radio_sleep &rArr; mg_writeBuf &rArr; SPI_CS_Disable_
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClk8to48
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_run
</UL>

<P><STRONG><a name="[ec]"></a>bb_advGenericSetup</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, fsm_adv_generic.o(i.bb_advGenericSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bb_advGenericSetup
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_adv_generic_para
</UL>

<P><STRONG><a name="[eb]"></a>bb_advGenericStart</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsm_adv_generic.o(i.bb_advGenericStart))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_adv_generic
</UL>

<P><STRONG><a name="[9a]"></a>bb_dvDoRcCal</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fsm_adv_generic.o(i.bb_dvDoRcCal))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onSleep
</UL>

<P><STRONG><a name="[e5]"></a>bb_getConnState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsm_base.o(i.bb_getConnState))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onSleep
</UL>

<P><STRONG><a name="[99]"></a>bb_sconnStart</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, fsm_sconn.o(i.bb_sconnStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bb_sconnStart &rArr; radio_sleep &rArr; mg_writeBuf &rArr; SPI_CS_Disable_
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setConnState
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSwTimer
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_sleep
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_connPara
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onRxPDU
</UL>

<P><STRONG><a name="[b3]"></a>bb_setConnState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsm_base.o(i.bb_setConnState))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_run
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_CheckLLConectionTO
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_sconnStart
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llTer
</UL>

<P><STRONG><a name="[7c]"></a>ble_run</STRONG> (Thumb, 498 bytes, Stack size 32 bytes, hwtest.o(i.ble_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ble_run &rArr; test_adv_generic &rArr; update_adv_generic_para &rArr; bb_advGenericSetup
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqEnabled
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuGotoSleepAndWakeup
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_readIRQ
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_getPdu
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_getHdr
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_getClock
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_clearIRQ
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setConnState
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_advCalTimerIrq
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdvEnableFlag
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMcuTimerForRcCal
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_adv_generic
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMcuWakeUpFlag
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSleep
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_sleep
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsrProcCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7a]"></a>ble_set_adv_data</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hwtest.o(i.ble_set_adv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_set_adv_data &rArr; update_adv_generic_para &rArr; bb_advGenericSetup
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_adv_generic_para
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7b]"></a>ble_set_adv_rsp_data</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hwtest.o(i.ble_set_adv_rsp_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_set_adv_rsp_data &rArr; update_adv_generic_para &rArr; bb_advGenericSetup
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_adv_generic_para
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[70]"></a>ble_set_name</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, hwtest.o(i.ble_set_name), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDeviceInfoData
</UL>

<P><STRONG><a name="[be]"></a>empty_pk</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ll_control.o(i.empty_pk))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = empty_pk &rArr; radio_setTxPduHeader &rArr; mg_writeBuf &rArr; SPI_CS_Disable_
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setTxPduHeader
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tx_len
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llTer
</UL>

<P><STRONG><a name="[e0]"></a>get_node_free</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, data_queue.o(i.get_node_free))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_notifydata
</UL>

<P><STRONG><a name="[8f]"></a>mgOta</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mg_ota.o(i.mgOta))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mgOta &rArr; radio_sleep &rArr; mg_writeBuf &rArr; SPI_CS_Disable_
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OtaSystemReboot
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTA_Proc
</UL>

<P><STRONG><a name="[9d]"></a>mg_activate</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, macrogiga_driver.o(i.mg_activate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mg_activate &rArr; SPI_CS_Disable_
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_Disable_
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_Enable_
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteRead
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_do_cal
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_initBle
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onSleep
</UL>

<P><STRONG><a name="[c2]"></a>mg_readBuf</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, macrogiga_driver.o(i.mg_readBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mg_readBuf &rArr; SPI_CS_Disable_
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_Disable_
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_Enable_
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteRead
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_getPdu
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_getHdr
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_getClock
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_initBle
</UL>

<P><STRONG><a name="[c3]"></a>mg_readReg</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, macrogiga_driver.o(i.mg_readReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mg_readReg &rArr; SPI_CS_Disable_
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_Disable_
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_Enable_
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteRead
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_do_cal
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_readIRQ
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_initBle
</UL>

<P><STRONG><a name="[c4]"></a>mg_writeBuf</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, macrogiga_driver.o(i.mg_writeBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mg_writeBuf &rArr; SPI_CS_Disable_
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_Disable_
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_Enable_
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteRead
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setWakeupTime
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setTxPduHeader
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setTxPayload
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setTimeout
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setStartTime
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setPaGain
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setCrcInit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setAdvPayload
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setAdvHeader
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setAccessCode
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_do_cal
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setIrqMask
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_sleep
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_initBle
</UL>

<P><STRONG><a name="[9e]"></a>mg_writeReg</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, macrogiga_driver.o(i.mg_writeReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mg_writeReg &rArr; SPI_CS_Disable_
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_Disable_
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_Enable_
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteRead
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_wakeup
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setMode
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setChannel
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_do_cal
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_clearIRQ
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_initBle
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onSleep
</UL>

<P><STRONG><a name="[cb]"></a>queue_empty</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, data_queue.o(i.queue_empty))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readQueue
</UL>

<P><STRONG><a name="[ce]"></a>queue_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, data_queue.o(i.queue_init))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onSleep
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sOpCheck_Start
</UL>

<P><STRONG><a name="[cc]"></a>queue_pop</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, data_queue.o(i.queue_pop))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readQueue
</UL>

<P><STRONG><a name="[88]"></a>queue_push</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, data_queue.o(i.queue_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = queue_push &rArr; create_node
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_node
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateTxQueue
</UL>

<P><STRONG><a name="[b8]"></a>radio_clearIRQ</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, macrogiga_driver.o(i.radio_clearIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = radio_clearIRQ &rArr; mg_writeReg &rArr; SPI_CS_Disable_
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_writeReg
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_run
</UL>

<P><STRONG><a name="[a1]"></a>radio_do_cal</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, macrogiga_driver.o(i.radio_do_cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = radio_do_cal &rArr; mg_writeBuf &rArr; SPI_CS_Disable_
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_writeReg
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_writeBuf
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_readReg
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_activate
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_initBle
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onSleep
</UL>

<P><STRONG><a name="[b9]"></a>radio_getClock</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, macrogiga_driver.o(i.radio_getClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = radio_getClock &rArr; mg_readBuf &rArr; SPI_CS_Disable_
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_readBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_run
</UL>

<P><STRONG><a name="[ba]"></a>radio_getHdr</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, macrogiga_driver.o(i.radio_getHdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = radio_getHdr &rArr; mg_readBuf &rArr; SPI_CS_Disable_
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_readBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_run
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onSleep
</UL>

<P><STRONG><a name="[bb]"></a>radio_getPdu</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, macrogiga_driver.o(i.radio_getPdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = radio_getPdu &rArr; mg_readBuf &rArr; SPI_CS_Disable_
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_readBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_run
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onSleep
</UL>

<P><STRONG><a name="[79]"></a>radio_initBle</STRONG> (Thumb, 310 bytes, Stack size 24 bytes, macrogiga_driver.o(i.radio_initBle))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = radio_initBle &rArr; radio_do_cal &rArr; mg_writeBuf &rArr; SPI_CS_Disable_
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setPaGain
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_do_cal
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_writeReg
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_writeBuf
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_readReg
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_readBuf
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_activate
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b7]"></a>radio_readIRQ</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, macrogiga_driver.o(i.radio_readIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = radio_readIRQ &rArr; mg_readReg &rArr; SPI_CS_Disable_
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_readReg
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_run
</UL>

<P><STRONG><a name="[c7]"></a>radio_setAccessCode</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, macrogiga_driver.o(i.radio_setAccessCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = radio_setAccessCode &rArr; mg_writeBuf &rArr; SPI_CS_Disable_
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_writeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onSleep
</UL>

<P><STRONG><a name="[96]"></a>radio_setAdvHeader</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, macrogiga_driver.o(i.radio_setAdvHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = radio_setAdvHeader &rArr; mg_writeBuf &rArr; SPI_CS_Disable_
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_writeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onWakeup
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onRxPDU
</UL>

<P><STRONG><a name="[97]"></a>radio_setAdvPayload</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, macrogiga_driver.o(i.radio_setAdvPayload))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = radio_setAdvPayload &rArr; mg_writeBuf &rArr; SPI_CS_Disable_
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_writeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onWakeup
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onRxPDU
</UL>

<P><STRONG><a name="[9b]"></a>radio_setChannel</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, macrogiga_driver.o(i.radio_setChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = radio_setChannel &rArr; mg_writeReg &rArr; SPI_CS_Disable_
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_writeReg
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onSleep
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onStart
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onSleep
</UL>

<P><STRONG><a name="[c8]"></a>radio_setCrcInit</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, macrogiga_driver.o(i.radio_setCrcInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = radio_setCrcInit &rArr; mg_writeBuf &rArr; SPI_CS_Disable_
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_writeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onSleep
</UL>

<P><STRONG><a name="[a3]"></a>radio_setIrqMask</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, macrogiga_driver.o(i.radio_setIrqMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = radio_setIrqMask &rArr; mg_writeBuf &rArr; SPI_CS_Disable_
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_writeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_adv_generic
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onStart
</UL>

<P><STRONG><a name="[94]"></a>radio_setMode</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, macrogiga_driver.o(i.radio_setMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = radio_setMode &rArr; mg_writeReg &rArr; SPI_CS_Disable_
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_writeReg
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onWakeup
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onWakeup
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onTxStarted
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onRxAA
</UL>

<P><STRONG><a name="[c6]"></a>radio_setPaGain</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, macrogiga_driver.o(i.radio_setPaGain))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = radio_setPaGain &rArr; mg_writeBuf &rArr; SPI_CS_Disable_
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_writeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_initBle
</UL>

<P><STRONG><a name="[95]"></a>radio_setStartTime</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, macrogiga_driver.o(i.radio_setStartTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = radio_setStartTime &rArr; mg_writeBuf &rArr; SPI_CS_Disable_
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_writeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onWakeup
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onRxPDU
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onWakeup
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onTxStarted
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onRxPDU
</UL>

<P><STRONG><a name="[a2]"></a>radio_setTimeout</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, macrogiga_driver.o(i.radio_setTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = radio_setTimeout &rArr; mg_writeBuf &rArr; SPI_CS_Disable_
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_writeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;applyConnUpdate
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onSleep
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onStart
</UL>

<P><STRONG><a name="[c9]"></a>radio_setTxPayload</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, macrogiga_driver.o(i.radio_setTxPayload))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = radio_setTxPayload &rArr; mg_writeBuf &rArr; SPI_CS_Disable_
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_writeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txRsp
</UL>

<P><STRONG><a name="[bf]"></a>radio_setTxPduHeader</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, macrogiga_driver.o(i.radio_setTxPduHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = radio_setTxPduHeader &rArr; mg_writeBuf &rArr; SPI_CS_Disable_
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_writeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;empty_pk
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txRsp
</UL>

<P><STRONG><a name="[a0]"></a>radio_setWakeupTime</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, macrogiga_driver.o(i.radio_setWakeupTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = radio_setWakeupTime &rArr; mg_writeBuf &rArr; SPI_CS_Disable_
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_writeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;applyConnUpdate
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onSleep
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onSleep
</UL>

<P><STRONG><a name="[8c]"></a>radio_sleep</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, macrogiga_driver.o(i.radio_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = radio_sleep &rArr; mg_writeBuf &rArr; SPI_CS_Disable_
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_writeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_advCalTimerIrq
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgOta
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_initBle
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_run
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTA_Proc
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_CheckLLConectionTO
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onTxStarted
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onRxAA
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_sconnStart
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onRxPDU
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onRxAA
</UL>

<P><STRONG><a name="[9c]"></a>radio_wakeup</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, macrogiga_driver.o(i.radio_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = radio_wakeup &rArr; mg_writeReg &rArr; SPI_CS_Disable_
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_writeReg
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onStart
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onSleep
</UL>

<P><STRONG><a name="[ca]"></a>readQueue</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, data_queue.o(i.readQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = readQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_pop
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_opcodeCheck
</UL>

<P><STRONG><a name="[cd]"></a>sOpCheck_Start</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, slave_dispatch.o(i.sOpCheck_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sOpCheck_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onSleep
</UL>

<P><STRONG><a name="[e6]"></a>s_l2capResetConParReq</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ll_control.o(i.s_l2capResetConParReq))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onSleep
</UL>

<P><STRONG><a name="[db]"></a>s_llChmReq</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ll_control.o(i.s_llChmReq))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_opcodeCheckOld
</UL>

<P><STRONG><a name="[cf]"></a>s_llConnParaReq</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, ll_control.o(i.s_llConnParaReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = s_llConnParaReq &rArr; GenerateTxQueue &rArr; queue_push &rArr; create_node
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateTxQueue
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llFea
</UL>

<P><STRONG><a name="[d1]"></a>s_llConnParaRsp</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, ll_control.o(i.s_llConnParaRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = s_llConnParaRsp &rArr; GenerateTxQueue &rArr; queue_push &rArr; create_node
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateTxQueue
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_opcodeCheckOld
</UL>

<P><STRONG><a name="[d2]"></a>s_llEnc</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, ll_control.o(i.s_llEnc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = s_llEnc &rArr; GenerateTxQueue &rArr; queue_push &rArr; create_node
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateTxQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_opcodeCheckOld
</UL>

<P><STRONG><a name="[d3]"></a>s_llFea</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ll_control.o(i.s_llFea))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = s_llFea &rArr; s_llConnParaReq &rArr; GenerateTxQueue &rArr; queue_push &rArr; create_node
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateTxQueue
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llConnParaReq
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_opcodeCheckOld
</UL>

<P><STRONG><a name="[d4]"></a>s_llSmPair</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, ll_control.o(i.s_llSmPair))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = s_llSmPair &rArr; GenerateTxQueue &rArr; queue_push &rArr; create_node
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateTxQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_opcodeCheckOld
</UL>

<P><STRONG><a name="[d5]"></a>s_llTer</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ll_control.o(i.s_llTer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = s_llTer &rArr; empty_pk &rArr; radio_setTxPduHeader &rArr; mg_writeBuf &rArr; SPI_CS_Disable_
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setConnState
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;empty_pk
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_opcodeCheckOld
</UL>

<P><STRONG><a name="[d6]"></a>s_llVersion</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ll_control.o(i.s_llVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = s_llVersion &rArr; GenerateTxQueue &rArr; queue_push &rArr; create_node
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateTxQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_opcodeCheckOld
</UL>

<P><STRONG><a name="[d8]"></a>s_opcodeCheckOld</STRONG> (Thumb, 562 bytes, Stack size 32 bytes, slave_dispatch.o(i.s_opcodeCheckOld))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = s_opcodeCheckOld &rArr; ser_write_rsp &rArr; OTA_Proc &rArr; sconn_notifydata &rArr; ser_notify_handle &rArr; att_rsp &rArr; GenerateTxQueue &rArr; queue_push &rArr; create_node
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_prepare_write_rsp
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_execute_write_rsp
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_rdByType
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_findIn
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_findByType
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_exMtuReq
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_notFd
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_user_send_notify_data_callback
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_rd_rsp
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_write_rsp
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_rdByGrType
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconnUpChm
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconnConUpdate
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llVersion
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llTer
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llSmPair
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llFea
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llEnc
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llConnParaRsp
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llChmReq
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onSleep
</UL>

<P><STRONG><a name="[da]"></a>sconnConUpdate</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, fsm_sconn.o(i.sconnConUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sconnConUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_opcodeCheckOld
</UL>

<P><STRONG><a name="[dc]"></a>sconnUpChm</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fsm_sconn.o(i.sconnUpChm))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sconnUpChm
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_opcodeCheckOld
</UL>

<P><STRONG><a name="[df]"></a>sconn_CheckLLConectionTO</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsm_sconn.o(i.sconn_CheckLLConectionTO))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sconn_CheckLLConectionTO &rArr; radio_sleep &rArr; mg_writeBuf &rArr; SPI_CS_Disable_
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setConnState
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSwTimeOut
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onWakeup
</UL>

<P><STRONG><a name="[a4]"></a>sconn_ReSetLLSupvTimer</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fsm_sconn.o(i.sconn_ReSetLLSupvTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sconn_ReSetLLSupvTimer &rArr; SetSwTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSwTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_adv_generic
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onStart
</UL>

<P><STRONG><a name="[90]"></a>sconn_notifydata</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, att.o(i.sconn_notifydata))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sconn_notifydata &rArr; ser_notify_handle &rArr; att_rsp &rArr; GenerateTxQueue &rArr; queue_push &rArr; create_node
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_node_free
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_notify_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTA_Proc
</UL>

<P><STRONG><a name="[de]"></a>ser_execute_write_rsp</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, att.o(i.ser_execute_write_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ser_execute_write_rsp &rArr; att_rsp &rArr; GenerateTxQueue &rArr; queue_push &rArr; create_node
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_rsp
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_execute_write
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_opcodeCheckOld
</UL>

<P><STRONG><a name="[e1]"></a>ser_notify_handle</STRONG> (Thumb, 88 bytes, Stack size 80 bytes, att.o(i.ser_notify_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ser_notify_handle &rArr; att_rsp &rArr; GenerateTxQueue &rArr; queue_push &rArr; create_node
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_rsp
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_notifydata
</UL>

<P><STRONG><a name="[dd]"></a>ser_prepare_write_rsp</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, att.o(i.ser_prepare_write_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ser_prepare_write_rsp &rArr; att_rsp &rArr; GenerateTxQueue &rArr; queue_push &rArr; create_node
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_rsp
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_prepare_write
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_opcodeCheckOld
</UL>

<P><STRONG><a name="[76]"></a>ser_write_rsp_pkt</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, att.o(i.ser_write_rsp_pkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ser_write_rsp_pkt &rArr; att_rsp &rArr; GenerateTxQueue &rArr; queue_push &rArr; create_node
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_rsp
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_write_rsp
</UL>

<P><STRONG><a name="[b4]"></a>test_adv_generic</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hwtest.o(i.test_adv_generic))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = test_adv_generic &rArr; update_adv_generic_para &rArr; bb_advGenericSetup
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_ReSetLLSupvTimer
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setIrqMask
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_advGenericStart
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_adv_generic_para
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_run
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onSleep
</UL>

<P><STRONG><a name="[d7]"></a>txRsp</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, ll_control.o(i.txRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = txRsp &rArr; radio_setTxPduHeader &rArr; mg_writeBuf &rArr; SPI_CS_Disable_
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setTxPduHeader
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setTxPayload
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tx_len
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_opcodeCheck
</UL>

<P><STRONG><a name="[bc]"></a>update_adv_generic_para</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, hwtest.o(i.update_adv_generic_para))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = update_adv_generic_para &rArr; bb_advGenericSetup
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_advGenericSetup
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDeviceInfoData
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_adv_generic
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_set_adv_rsp_data
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_set_adv_data
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[32]"></a>SetSysClockTo48</STRONG> (Thumb, 180 bytes, Stack size 20 bytes, system_mm32l0xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClockTo48
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[45]"></a>SysTick_Config</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bsp_ota.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Configuration
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClk48to8
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClk8to48
</UL>

<P><STRONG><a name="[aa]"></a>att_rsp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, att.o(i.att_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = att_rsp &rArr; GenerateTxQueue &rArr; queue_push &rArr; create_node
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateTxQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_prepare_write_rsp
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_notify_handle
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_execute_write_rsp
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_rdByType
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_findIn
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_findByType
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_exMtuReq
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_write_rsp_pkt
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_rdByGrTypeRspPrimaryService
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_rd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_notFd
</UL>

<P><STRONG><a name="[bd]"></a>create_node</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, data_queue.o(i.create_node))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = create_node
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_push
</UL>

<P><STRONG><a name="[24]"></a>s_opcodeCheck</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, slave_dispatch.o(i.s_opcodeCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = s_opcodeCheck &rArr; txRsp &rArr; radio_setTxPduHeader &rArr; mg_writeBuf &rArr; SPI_CS_Disable_
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txRsp
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readQueue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slave_dispatch.o(.constdata)
</UL>
<P><STRONG><a name="[27]"></a>adv_generic_onRxAA</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, fsm_adv_generic.o(i.adv_generic_onRxAA))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = adv_generic_onRxAA &rArr; radio_sleep &rArr; mg_writeBuf &rArr; SPI_CS_Disable_
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setMode
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_sleep
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMcuTimerForRcCal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm_adv_generic.o(.constdata)
</UL>
<P><STRONG><a name="[28]"></a>adv_generic_onRxPDU</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, fsm_adv_generic.o(i.adv_generic_onRxPDU))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = adv_generic_onRxPDU &rArr; bb_sconnStart &rArr; radio_sleep &rArr; mg_writeBuf &rArr; SPI_CS_Disable_
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setStartTime
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setAdvPayload
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setAdvHeader
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_sleep
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_sconnStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm_adv_generic.o(.constdata)
</UL>
<P><STRONG><a name="[2a]"></a>adv_generic_onSleep</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, fsm_adv_generic.o(i.adv_generic_onSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = adv_generic_onSleep &rArr; radio_setWakeupTime &rArr; mg_writeBuf &rArr; SPI_CS_Disable_
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_wakeup
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setWakeupTime
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setChannel
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_do_cal
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_writeReg
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_activate
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMcuSleepFlag
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_dvDoRcCal
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoRcConvert_LF_AMPLE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm_adv_generic.o(.constdata)
</UL>
<P><STRONG><a name="[25]"></a>adv_generic_onStart</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsm_adv_generic.o(i.adv_generic_onStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = adv_generic_onStart &rArr; radio_setTimeout &rArr; mg_writeBuf &rArr; SPI_CS_Disable_
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_wakeup
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setTimeout
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setChannel
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_ReSetLLSupvTimer
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setIrqMask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm_adv_generic.o(.constdata)
</UL>
<P><STRONG><a name="[29]"></a>adv_generic_onTxStarted</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fsm_adv_generic.o(i.adv_generic_onTxStarted))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = adv_generic_onTxStarted &rArr; radio_setStartTime &rArr; mg_writeBuf &rArr; SPI_CS_Disable_
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setStartTime
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm_adv_generic.o(.constdata)
</UL>
<P><STRONG><a name="[26]"></a>adv_generic_onWakeup</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, fsm_adv_generic.o(i.adv_generic_onWakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = adv_generic_onWakeup &rArr; radio_setStartTime &rArr; mg_writeBuf &rArr; SPI_CS_Disable_
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setStartTime
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setMode
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setAdvPayload
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setAdvHeader
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm_adv_generic.o(.constdata)
</UL>
<P><STRONG><a name="[a8]"></a>apply_connPara</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, fsm_sconn.o(i.apply_connPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = apply_connPara
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_sconnStart
</UL>

<P><STRONG><a name="[a7]"></a>sconn_onNumUsedCh</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, fsm_sconn.o(i.sconn_onNumUsedCh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = sconn_onNumUsedCh
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;applyUpdateChm
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onSleep
</UL>

<P><STRONG><a name="[2c]"></a>sconn_onRxAA</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fsm_sconn.o(i.sconn_onRxAA))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sconn_onRxAA &rArr; radio_sleep &rArr; mg_writeBuf &rArr; SPI_CS_Disable_
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onTxStarted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm_sconn.o(.constdata)
</UL>
<P><STRONG><a name="[2d]"></a>sconn_onRxPDU</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, fsm_sconn.o(i.sconn_onRxPDU))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sconn_onRxPDU &rArr; radio_setStartTime &rArr; mg_writeBuf &rArr; SPI_CS_Disable_
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableEnvINT
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableEnvINT
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setStartTime
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSwTimer
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveCurrentHdr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm_sconn.o(.constdata)
</UL>
<P><STRONG><a name="[2f]"></a>sconn_onSleep</STRONG> (Thumb, 396 bytes, Stack size 24 bytes, fsm_sconn.o(i.sconn_onSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = sconn_onSleep &rArr; s_opcodeCheckOld &rArr; ser_write_rsp &rArr; OTA_Proc &rArr; sconn_notifydata &rArr; ser_notify_handle &rArr; att_rsp &rArr; GenerateTxQueue &rArr; queue_push &rArr; create_node
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setWakeupTime
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setTimeout
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setCrcInit
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setChannel
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setAccessCode
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_getPdu
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_getHdr
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_adv_generic
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMcuSleepFlag
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NotifyComData
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnectStausUpdate
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_l2capResetConParReq
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;applyUpdateChm
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;applyConnUpdate
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onNumUsedCh
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getConnState
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoRcConvert_LF_AMPLE
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoRcConvert_HF_LF_COEF
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_opcodeCheckOld
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sOpCheck_Start
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm_sconn.o(.constdata)
</UL>
<P><STRONG><a name="[2e]"></a>sconn_onTxStarted</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fsm_sconn.o(i.sconn_onTxStarted))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sconn_onTxStarted &rArr; sconn_onRxAA &rArr; radio_sleep &rArr; mg_writeBuf &rArr; SPI_CS_Disable_
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_sleep
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onRxAA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm_sconn.o(.constdata)
</UL>
<P><STRONG><a name="[2b]"></a>sconn_onWakeup</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fsm_sconn.o(i.sconn_onWakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sconn_onWakeup &rArr; sconn_CheckLLConectionTO &rArr; radio_sleep &rArr; mg_writeBuf &rArr; SPI_CS_Disable_
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setStartTime
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setMode
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_CheckLLConectionTO
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm_sconn.o(.constdata)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
